//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/admen/RiderProjects/pascal-rider-plugin/Spring/src/Spring/src/antlr/PascalParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JetBrains.ReSharper.Plugins.Spring.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class PascalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, UnsignedNumber=2, SignedNumber=3, SINGLE_COMMENT=4, MultiComment1=5, 
		MultiComment2=6, CharacterString=7, QuotedString=8, StringCharacter=9, 
		ControlString=10, LABEL=11, SIGN=12, DOLLAR=13, AMPERSAND=14, AT=15, PERCENT=16, 
		SHARP=17, QUOTE=18, COMMA=19, COLON=20, SEMICOLON=21, RANGE=22, MULT=23, 
		DIV=24, ADD=25, SUB=26, INT_DIV=27, MOD=28, XOR=29, OR=30, AND=31, SHL=32, 
		SHR=33, DOUBLE_LANGLE=34, DOUBLE_RANGLE=35, NOT=36, EXCL_EQ=37, LANGLE=38, 
		RANGLE=39, LE=40, GE=41, EQ=42, ASSIGNMENT=43, ADD_ASSIGNMENT=44, SUB_ASSIGNMENT=45, 
		MULT_ASSIGNMENT=46, DIV_ASSIGNMENT=47, IN=48, IS=49, AS=50, NIL=51, GOTO=52, 
		BEGIN=53, END=54, FOR=55, DO=56, TO=57, DOWNTO=58, CASE=59, OF=60, IF=61, 
		THEN=62, ELSE=63, OTHERWISE=64, REPEAT=65, UNTIL=66, WHILE=67, LPAREN=68, 
		RPAREN=69, LCURLY=70, RCURLY=71, LSQUARE=72, RSQUARE=73, IDENT=74, SYMBOL=75, 
		BAD_CHARACTER=76;
	public const int
		RULE_pascalFile = 0, RULE_expression = 1, RULE_simpleExpression = 2, RULE_term = 3, 
		RULE_factor = 4, RULE_functionCall = 5, RULE_actualParamsList = 6, RULE_unsignedConstant = 7, 
		RULE_setConstructor = 8, RULE_setGroup = 9, RULE_valueTypecast = 10, RULE_addressFactor = 11, 
		RULE_comparisonOp = 12, RULE_additiveOp = 13, RULE_multiplicativeOp = 14, 
		RULE_statement = 15, RULE_simpleStatement = 16, RULE_assigmentStatement = 17, 
		RULE_assigmentOp = 18, RULE_procedureStatement = 19, RULE_gotoStatement = 20, 
		RULE_structuredStatement = 21, RULE_compoundStatement = 22, RULE_conditionalStatement = 23, 
		RULE_caseStatement = 24, RULE_case = 25, RULE_caseConstant = 26, RULE_elsePart = 27, 
		RULE_ifStatement = 28, RULE_repetitiveStatement = 29, RULE_forStatement = 30, 
		RULE_forInStatement = 31, RULE_repeatStatement = 32, RULE_whileStatement = 33, 
		RULE_withStatement = 34;
	public static readonly string[] ruleNames = {
		"pascalFile", "expression", "simpleExpression", "term", "factor", "functionCall", 
		"actualParamsList", "unsignedConstant", "setConstructor", "setGroup", 
		"valueTypecast", "addressFactor", "comparisonOp", "additiveOp", "multiplicativeOp", 
		"statement", "simpleStatement", "assigmentStatement", "assigmentOp", "procedureStatement", 
		"gotoStatement", "structuredStatement", "compoundStatement", "conditionalStatement", 
		"caseStatement", "case", "caseConstant", "elsePart", "ifStatement", "repetitiveStatement", 
		"forStatement", "forInStatement", "repeatStatement", "whileStatement", 
		"withStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'$'", "'&'", "'@'", "'%'", "'#'", "'''", "','", "':'", "';'", "'..'", 
		"'*'", "'/'", "'+'", "'-'", null, null, null, null, null, null, null, 
		"'<<'", "'>>'", null, "'<>'", "'<'", "'>'", "'<='", "'>='", "'='", "':='", 
		"'+='", "'-='", "'*='", "'/='", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "UnsignedNumber", "SignedNumber", "SINGLE_COMMENT", "MultiComment1", 
		"MultiComment2", "CharacterString", "QuotedString", "StringCharacter", 
		"ControlString", "LABEL", "SIGN", "DOLLAR", "AMPERSAND", "AT", "PERCENT", 
		"SHARP", "QUOTE", "COMMA", "COLON", "SEMICOLON", "RANGE", "MULT", "DIV", 
		"ADD", "SUB", "INT_DIV", "MOD", "XOR", "OR", "AND", "SHL", "SHR", "DOUBLE_LANGLE", 
		"DOUBLE_RANGLE", "NOT", "EXCL_EQ", "LANGLE", "RANGLE", "LE", "GE", "EQ", 
		"ASSIGNMENT", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", "DIV_ASSIGNMENT", 
		"IN", "IS", "AS", "NIL", "GOTO", "BEGIN", "END", "FOR", "DO", "TO", "DOWNTO", 
		"CASE", "OF", "IF", "THEN", "ELSE", "OTHERWISE", "REPEAT", "UNTIL", "WHILE", 
		"LPAREN", "RPAREN", "LCURLY", "RCURLY", "LSQUARE", "RSQUARE", "IDENT", 
		"SYMBOL", "BAD_CHARACTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PascalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PascalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PascalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PascalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PascalFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PascalParser.Eof, 0); }
		public PascalFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pascalFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterPascalFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitPascalFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPascalFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PascalFileContext pascalFile() {
		PascalFileContext _localctx = new PascalFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_pascalFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			compoundStatement();
			State = 71;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOpContext comparisonOp() {
			return GetRuleContext<ComparisonOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			simpleExpression();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCL_EQ) | (1L << LANGLE) | (1L << RANGLE) | (1L << LE) | (1L << GE) | (1L << EQ) | (1L << IN) | (1L << IS))) != 0)) {
				{
				State = 74;
				comparisonOp();
				State = 75;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOpContext[] additiveOp() {
			return GetRuleContexts<AdditiveOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOpContext additiveOp(int i) {
			return GetRuleContext<AdditiveOpContext>(i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			term();
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << XOR) | (1L << OR))) != 0)) {
				{
				{
				State = 80;
				additiveOp();
				State = 81;
				term();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOpContext[] multiplicativeOp() {
			return GetRuleContexts<MultiplicativeOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOpContext multiplicativeOp(int i) {
			return GetRuleContext<MultiplicativeOpContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 6, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			factor();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << DIV) | (1L << INT_DIV) | (1L << MOD) | (1L << AND) | (1L << SHL) | (1L << SHR) | (1L << AS))) != 0)) {
				{
				{
				State = 89;
				multiplicativeOp();
				State = 90;
				factor();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PascalParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PascalParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedConstantContext unsignedConstant() {
			return GetRuleContext<UnsignedConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PascalParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(PascalParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetConstructorContext setConstructor() {
			return GetRuleContext<SetConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueTypecastContext valueTypecast() {
			return GetRuleContext<ValueTypecastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddressFactorContext addressFactor() {
			return GetRuleContext<AddressFactorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 8, RULE_factor);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				Match(LPAREN);
				State = 98;
				expression();
				State = 99;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(IDENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				unsignedConstant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				Match(NOT);
				State = 105;
				factor();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 106;
				Match(SIGN);
				State = 107;
				factor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 108;
				setConstructor();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 109;
				valueTypecast();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 110;
				addressFactor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PascalParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualParamsListContext actualParamsList() {
			return GetRuleContext<ActualParamsListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(IDENT);
			State = 114;
			actualParamsList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParamsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PascalParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public ActualParamsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParamsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterActualParamsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitActualParamsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParamsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParamsListContext actualParamsList() {
		ActualParamsListContext _localctx = new ActualParamsListContext(Context, State);
		EnterRule(_localctx, 12, RULE_actualParamsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(LPAREN);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnsignedNumber) | (1L << CharacterString) | (1L << SIGN) | (1L << AT) | (1L << NOT) | (1L << NIL))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LPAREN - 68)) | (1L << (LSQUARE - 68)) | (1L << (IDENT - 68)))) != 0)) {
				{
				State = 117;
				expression();
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 118;
					Match(COMMA);
					State = 119;
					expression();
					}
					}
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 127;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnsignedNumber() { return GetToken(PascalParser.UnsignedNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterString() { return GetToken(PascalParser.CharacterString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(PascalParser.NIL, 0); }
		public UnsignedConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedConstantContext unsignedConstant() {
		UnsignedConstantContext _localctx = new UnsignedConstantContext(Context, State);
		EnterRule(_localctx, 14, RULE_unsignedConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnsignedNumber) | (1L << CharacterString) | (1L << NIL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(PascalParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(PascalParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetGroupContext[] setGroup() {
			return GetRuleContexts<SetGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetGroupContext setGroup(int i) {
			return GetRuleContext<SetGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public SetConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSetConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSetConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetConstructorContext setConstructor() {
		SetConstructorContext _localctx = new SetConstructorContext(Context, State);
		EnterRule(_localctx, 16, RULE_setConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(LSQUARE);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnsignedNumber) | (1L << CharacterString) | (1L << SIGN) | (1L << AT) | (1L << NOT) | (1L << NIL))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LPAREN - 68)) | (1L << (LSQUARE - 68)) | (1L << (IDENT - 68)))) != 0)) {
				{
				State = 132;
				setGroup();
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 133;
					Match(COMMA);
					State = 134;
					setGroup();
					}
					}
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 142;
			Match(RSQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PascalParser.RANGE, 0); }
		public SetGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSetGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSetGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetGroupContext setGroup() {
		SetGroupContext _localctx = new SetGroupContext(Context, State);
		EnterRule(_localctx, 18, RULE_setGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			expression();
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE) {
				{
				State = 145;
				Match(RANGE);
				State = 146;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypecastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PascalParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PascalParser.RPAREN, 0); }
		public ValueTypecastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueTypecast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterValueTypecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitValueTypecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypecast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypecastContext valueTypecast() {
		ValueTypecastContext _localctx = new ValueTypecastContext(Context, State);
		EnterRule(_localctx, 20, RULE_valueTypecast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(IDENT);
			State = 150;
			Match(LPAREN);
			State = 151;
			expression();
			State = 152;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddressFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PascalParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PascalParser.IDENT, 0); }
		public AddressFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAddressFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAddressFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddressFactorContext addressFactor() {
		AddressFactorContext _localctx = new AddressFactorContext(Context, State);
		EnterRule(_localctx, 22, RULE_addressFactor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(AT);
			State = 155;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(PascalParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(PascalParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(PascalParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(PascalParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(PascalParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL_EQ() { return GetToken(PascalParser.EXCL_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(PascalParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PascalParser.IS, 0); }
		public ComparisonOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterComparisonOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitComparisonOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOpContext comparisonOp() {
		ComparisonOpContext _localctx = new ComparisonOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_comparisonOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCL_EQ) | (1L << LANGLE) | (1L << RANGLE) | (1L << LE) | (1L << GE) | (1L << EQ) | (1L << IN) | (1L << IS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(PascalParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(PascalParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PascalParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(PascalParser.XOR, 0); }
		public AdditiveOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAdditiveOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAdditiveOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveOpContext additiveOp() {
		AdditiveOpContext _localctx = new AdditiveOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_additiveOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << XOR) | (1L << OR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(PascalParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(PascalParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(PascalParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(PascalParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PascalParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHL() { return GetToken(PascalParser.SHL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHR() { return GetToken(PascalParser.SHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PascalParser.AS, 0); }
		public MultiplicativeOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeOpContext multiplicativeOp() {
		MultiplicativeOpContext _localctx = new MultiplicativeOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_multiplicativeOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << DIV) | (1L << INT_DIV) | (1L << MOD) | (1L << AND) | (1L << SHL) | (1L << SHR) | (1L << AS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PascalParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredStatementContext structuredStatement() {
			return GetRuleContext<StructuredStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LABEL) {
				{
				State = 163;
				Match(LABEL);
				State = 164;
				Match(COLON);
				}
			}

			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 167;
				simpleStatement();
				}
				break;
			case 2:
				{
				State = 168;
				structuredStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssigmentStatementContext assigmentStatement() {
			return GetRuleContext<AssigmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureStatementContext procedureStatement() {
			return GetRuleContext<ProcedureStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleStatement);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				assigmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				procedureStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173;
				gotoStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssigmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PascalParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssigmentOpContext assigmentOp() {
			return GetRuleContext<AssigmentOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssigmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assigmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAssigmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAssigmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssigmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssigmentStatementContext assigmentStatement() {
		AssigmentStatementContext _localctx = new AssigmentStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_assigmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(IDENT);
			State = 177;
			assigmentOp();
			State = 178;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssigmentOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PascalParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGNMENT() { return GetToken(PascalParser.ADD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGNMENT() { return GetToken(PascalParser.SUB_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGNMENT() { return GetToken(PascalParser.MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGNMENT() { return GetToken(PascalParser.DIV_ASSIGNMENT, 0); }
		public AssigmentOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assigmentOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAssigmentOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAssigmentOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssigmentOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssigmentOpContext assigmentOp() {
		AssigmentOpContext _localctx = new AssigmentOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_assigmentOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGNMENT) | (1L << ADD_ASSIGNMENT) | (1L << SUB_ASSIGNMENT) | (1L << MULT_ASSIGNMENT) | (1L << DIV_ASSIGNMENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PascalParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualParamsListContext actualParamsList() {
			return GetRuleContext<ActualParamsListContext>(0);
		}
		public ProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStatementContext procedureStatement() {
		ProcedureStatementContext _localctx = new ProcedureStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_procedureStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(IDENT);
			State = 183;
			actualParamsList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(PascalParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PascalParser.LABEL, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(GOTO);
			State = 186;
			Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepetitiveStatementContext repetitiveStatement() {
			return GetRuleContext<RepetitiveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public StructuredStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredStatementContext structuredStatement() {
		StructuredStatementContext _localctx = new StructuredStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_structuredStatement);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				compoundStatement();
				}
				break;
			case CASE:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				conditionalStatement();
				}
				break;
			case FOR:
			case REPEAT:
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 190;
				repetitiveStatement();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 191;
				withStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(PascalParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(PascalParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(PascalParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(PascalParser.SEMICOLON, i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_compoundStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(BEGIN);
			State = 195;
			statement();
			State = 200;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 196;
					Match(SEMICOLON);
					State = 197;
					statement();
					}
					} 
				}
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 203;
				Match(SEMICOLON);
				}
			}

			State = 206;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_conditionalStatement);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				caseStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PascalParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PascalParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(PascalParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(PascalParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(PascalParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsePartContext elsePart() {
			return GetRuleContext<ElsePartContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(CASE);
			State = 213;
			expression();
			State = 214;
			Match(OF);
			State = 215;
			@case();
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 216;
					Match(SEMICOLON);
					State = 217;
					@case();
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE || _la==OTHERWISE) {
				{
				State = 223;
				elsePart();
				}
			}

			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 226;
				Match(SEMICOLON);
				}
			}

			State = 229;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseConstantContext[] caseConstant() {
			return GetRuleContexts<CaseConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseConstantContext caseConstant(int i) {
			return GetRuleContext<CaseConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RANGE() { return GetTokens(PascalParser.RANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE(int i) {
			return GetToken(PascalParser.RANGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 50, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			caseConstant();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE) {
				{
				State = 232;
				Match(RANGE);
				State = 233;
				caseConstant();
				}
			}

			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 236;
				Match(COMMA);
				State = 237;
				caseConstant();
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RANGE) {
					{
					State = 238;
					Match(RANGE);
					State = 239;
					caseConstant();
					}
				}

				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 247;
			Match(COLON);
			State = 248;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SignedNumber() { return GetToken(PascalParser.SignedNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterString() { return GetToken(PascalParser.CharacterString, 0); }
		public CaseConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCaseConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCaseConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseConstantContext caseConstant() {
		CaseConstantContext _localctx = new CaseConstantContext(Context, State);
		EnterRule(_localctx, 52, RULE_caseConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			_la = TokenStream.LA(1);
			if ( !(_la==SignedNumber || _la==CharacterString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsePartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PascalParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE() { return GetToken(PascalParser.OTHERWISE, 0); }
		public ElsePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsePart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterElsePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitElsePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsePartContext elsePart() {
		ElsePartContext _localctx = new ElsePartContext(Context, State);
		EnterRule(_localctx, 54, RULE_elsePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			_la = TokenStream.LA(1);
			if ( !(_la==ELSE || _la==OTHERWISE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 253;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(PascalParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PascalParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PascalParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(IF);
			State = 256;
			expression();
			State = 257;
			Match(THEN);
			State = 258;
			statement();
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 259;
				Match(ELSE);
				State = 260;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetitiveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInStatementContext forInStatement() {
			return GetRuleContext<ForInStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public RepetitiveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetitiveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterRepetitiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitRepetitiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetitiveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetitiveStatementContext repetitiveStatement() {
		RepetitiveStatementContext _localctx = new RepetitiveStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_repetitiveStatement);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				forStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				forInStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 265;
				repeatStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 266;
				whileStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PascalParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PascalParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PascalParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PascalParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PascalParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOWNTO() { return GetToken(PascalParser.DOWNTO, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(FOR);
			State = 270;
			Match(IDENT);
			State = 271;
			Match(ASSIGNMENT);
			State = 272;
			expression();
			State = 273;
			_la = TokenStream.LA(1);
			if ( !(_la==TO || _la==DOWNTO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 274;
			expression();
			State = 275;
			Match(DO);
			State = 276;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PascalParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PascalParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(PascalParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PascalParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInStatementContext forInStatement() {
		ForInStatementContext _localctx = new ForInStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_forInStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(FOR);
			State = 279;
			Match(IDENT);
			State = 280;
			Match(IN);
			State = 281;
			expression();
			State = 282;
			Match(DO);
			State = 283;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(PascalParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PascalParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(PascalParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(PascalParser.SEMICOLON, i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(REPEAT);
			State = 286;
			statement();
			State = 291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 287;
					Match(SEMICOLON);
					State = 288;
					statement();
					}
					} 
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 294;
				Match(SEMICOLON);
				}
			}

			State = 297;
			Match(UNTIL);
			State = 298;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(PascalParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PascalParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(WHILE);
			State = 301;
			expression();
			State = 302;
			Match(DO);
			State = 303;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(PascalParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(PascalParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PascalParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_withStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(IDENT);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 306;
				Match(COMMA);
				State = 307;
				Match(IDENT);
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 313;
			Match(DO);
			State = 314;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'N', '\x13F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'P', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', 'V', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'Y', 
		'\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', 
		'\x5', '_', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x62', '\v', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'r', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '{', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '~', '\v', '\b', '\x5', '\b', '\x80', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\x8A', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x8D', '\v', '\n', '\x5', '\n', '\x8F', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x96', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xA8', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\xAC', '\n', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\xB1', '\n', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xC3', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\xC9', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\xCC', '\v', '\x18', '\x3', '\x18', '\x5', '\x18', '\xCF', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\xD5', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\xDD', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\xE0', '\v', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\xE3', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\xE6', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xED', '\n', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xF3', '\n', 
		'\x1B', '\a', '\x1B', '\xF5', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', 
		'\xF8', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x108', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x10E', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x124', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x127', '\v', '\"', '\x3', '\"', '\x5', '\"', '\x12A', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\a', 
		'$', '\x137', '\n', '$', '\f', '$', '\xE', '$', '\x13A', '\v', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x2', '\x2', '%', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'\x2', '\n', '\x5', '\x2', '\x4', '\x4', '\t', '\t', '\x35', '\x35', '\x4', 
		'\x2', '\'', ',', '\x32', '\x33', '\x4', '\x2', '\x1B', '\x1C', '\x1F', 
		' ', '\x6', '\x2', '\x19', '\x1A', '\x1D', '\x1E', '!', '#', '\x34', '\x34', 
		'\x3', '\x2', '-', '\x31', '\x4', '\x2', '\x5', '\x5', '\t', '\t', '\x3', 
		'\x2', '\x41', '\x42', '\x3', '\x2', ';', '<', '\x2', '\x143', '\x2', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x4', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'Q', '\x3', '\x2', '\x2', '\x2', '\b', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'q', '\x3', '\x2', '\x2', '\x2', '\f', 's', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'v', '\x3', '\x2', '\x2', '\x2', '\x10', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x92', '\x3', '\x2', '\x2', '\x2', '\x16', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xA3', '\x3', '\x2', '\x2', '\x2', ' ', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xB0', '\x3', '\x2', '\x2', '\x2', '$', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xB6', '\x3', '\x2', '\x2', '\x2', '(', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xBB', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '.', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x32', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\x38', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x101', '\x3', '\x2', '\x2', '\x2', '<', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x10F', '\x3', '\x2', '\x2', '\x2', '@', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x46', '\x133', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x5', '.', '\x18', '\x2', 'I', 'J', '\a', '\x2', 
		'\x2', '\x3', 'J', '\x3', '\x3', '\x2', '\x2', '\x2', 'K', 'O', '\x5', 
		'\x6', '\x4', '\x2', 'L', 'M', '\x5', '\x1A', '\xE', '\x2', 'M', 'N', 
		'\x5', '\x6', '\x4', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 
		'L', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x5', '\x3', '\x2', '\x2', '\x2', 'Q', 'W', '\x5', '\b', '\x5', 
		'\x2', 'R', 'S', '\x5', '\x1C', '\xF', '\x2', 'S', 'T', '\x5', '\b', '\x5', 
		'\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '`', '\x5', '\n', 
		'\x6', '\x2', '[', '\\', '\x5', '\x1E', '\x10', '\x2', '\\', ']', '\x5', 
		'\n', '\x6', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', '[', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\x46', '\x2', '\x2', '\x64', '\x65', '\x5', '\x4', 
		'\x3', '\x2', '\x65', '\x66', '\a', 'G', '\x2', '\x2', '\x66', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'r', '\a', 'L', '\x2', '\x2', 'h', 'r', '\x5', 
		'\f', '\a', '\x2', 'i', 'r', '\x5', '\x10', '\t', '\x2', 'j', 'k', '\a', 
		'&', '\x2', '\x2', 'k', 'r', '\x5', '\n', '\x6', '\x2', 'l', 'm', '\a', 
		'\xE', '\x2', '\x2', 'm', 'r', '\x5', '\n', '\x6', '\x2', 'n', 'r', '\x5', 
		'\x12', '\n', '\x2', 'o', 'r', '\x5', '\x16', '\f', '\x2', 'p', 'r', '\x5', 
		'\x18', '\r', '\x2', 'q', '\x63', '\x3', '\x2', '\x2', '\x2', 'q', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'q', 'h', '\x3', '\x2', '\x2', '\x2', 'q', 
		'i', '\x3', '\x2', '\x2', '\x2', 'q', 'j', '\x3', '\x2', '\x2', '\x2', 
		'q', 'l', '\x3', '\x2', '\x2', '\x2', 'q', 'n', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 
		'r', '\v', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', 'L', '\x2', '\x2', 
		't', 'u', '\x5', '\xE', '\b', '\x2', 'u', '\r', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x7F', '\a', '\x46', '\x2', '\x2', 'w', '|', '\x5', '\x4', '\x3', 
		'\x2', 'x', 'y', '\a', '\x15', '\x2', '\x2', 'y', '{', '\x5', '\x4', '\x3', 
		'\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x80', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', 'w', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\a', 'G', '\x2', '\x2', '\x82', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\t', '\x2', '\x2', '\x2', '\x84', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x8E', '\a', 'J', '\x2', '\x2', '\x86', 
		'\x8B', '\x5', '\x14', '\v', '\x2', '\x87', '\x88', '\a', '\x15', '\x2', 
		'\x2', '\x88', '\x8A', '\x5', '\x14', '\v', '\x2', '\x89', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\a', 'K', '\x2', '\x2', '\x91', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x95', '\x5', '\x4', '\x3', '\x2', '\x93', 
		'\x94', '\a', '\x18', '\x2', '\x2', '\x94', '\x96', '\x5', '\x4', '\x3', 
		'\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x15', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\a', 'L', '\x2', '\x2', '\x98', '\x99', '\a', '\x46', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', '\x4', '\x3', '\x2', '\x9A', '\x9B', '\a', 
		'G', '\x2', '\x2', '\x9B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '\x11', '\x2', '\x2', '\x9D', '\x9E', '\a', 'L', '\x2', 
		'\x2', '\x9E', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\t', 
		'\x3', '\x2', '\x2', '\xA0', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA2', '\t', '\x4', '\x2', '\x2', '\xA2', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\t', '\x5', '\x2', '\x2', '\xA4', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\r', '\x2', '\x2', '\xA6', 
		'\xA8', '\a', '\x16', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAC', '\x5', '\"', '\x12', '\x2', '\xAA', 
		'\xAC', '\x5', ',', '\x17', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '!', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xB1', '\x5', '$', '\x13', '\x2', '\xAE', '\xB1', '\x5', '(', '\x15', 
		'\x2', '\xAF', '\xB1', '\x5', '*', '\x16', '\x2', '\xB0', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', 'L', '\x2', '\x2', '\xB3', '\xB4', '\x5', 
		'&', '\x14', '\x2', '\xB4', '\xB5', '\x5', '\x4', '\x3', '\x2', '\xB5', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\t', '\x6', '\x2', '\x2', 
		'\xB7', '\'', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', 'L', '\x2', 
		'\x2', '\xB9', '\xBA', '\x5', '\xE', '\b', '\x2', '\xBA', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x36', '\x2', '\x2', '\xBC', 
		'\xBD', '\a', '\r', '\x2', '\x2', '\xBD', '+', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xC3', '\x5', '.', '\x18', '\x2', '\xBF', '\xC3', '\x5', '\x30', 
		'\x19', '\x2', '\xC0', '\xC3', '\x5', '<', '\x1F', '\x2', '\xC1', '\xC3', 
		'\x5', '\x46', '$', '\x2', '\xC2', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '-', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x37', '\x2', '\x2', 
		'\xC5', '\xCA', '\x5', ' ', '\x11', '\x2', '\xC6', '\xC7', '\a', '\x17', 
		'\x2', '\x2', '\xC7', '\xC9', '\x5', ' ', '\x11', '\x2', '\xC8', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\a', '\x17', '\x2', '\x2', 
		'\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\a', '\x38', '\x2', '\x2', '\xD1', '/', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD5', '\x5', '\x32', '\x1A', '\x2', '\xD3', '\xD5', '\x5', ':', '\x1E', 
		'\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\x31', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '=', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\x4', '\x3', 
		'\x2', '\xD8', '\xD9', '\a', '>', '\x2', '\x2', '\xD9', '\xDE', '\x5', 
		'\x34', '\x1B', '\x2', '\xDA', '\xDB', '\a', '\x17', '\x2', '\x2', '\xDB', 
		'\xDD', '\x5', '\x34', '\x1B', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE3', '\x5', '\x38', '\x1D', '\x2', '\xE2', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\a', '\x17', '\x2', 
		'\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\a', '\x38', '\x2', '\x2', '\xE8', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEC', '\x5', '\x36', '\x1C', '\x2', '\xEA', '\xEB', '\a', 
		'\x18', '\x2', '\x2', '\xEB', '\xED', '\x5', '\x36', '\x1C', '\x2', '\xEC', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', 
		'\x15', '\x2', '\x2', '\xEF', '\xF2', '\x5', '\x36', '\x1C', '\x2', '\xF0', 
		'\xF1', '\a', '\x18', '\x2', '\x2', '\xF1', '\xF3', '\x5', '\x36', '\x1C', 
		'\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x16', '\x2', 
		'\x2', '\xFA', '\xFB', '\x5', ' ', '\x11', '\x2', '\xFB', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\t', '\a', '\x2', '\x2', '\xFD', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\t', '\b', '\x2', 
		'\x2', '\xFF', '\x100', '\x5', ' ', '\x11', '\x2', '\x100', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x102', '\a', '?', '\x2', '\x2', '\x102', 
		'\x103', '\x5', '\x4', '\x3', '\x2', '\x103', '\x104', '\a', '@', '\x2', 
		'\x2', '\x104', '\x107', '\x5', ' ', '\x11', '\x2', '\x105', '\x106', 
		'\a', '\x41', '\x2', '\x2', '\x106', '\x108', '\x5', ' ', '\x11', '\x2', 
		'\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x108', ';', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10E', '\x5', '>', ' ', '\x2', '\x10A', '\x10E', '\x5', '@', '!', '\x2', 
		'\x10B', '\x10E', '\x5', '\x42', '\"', '\x2', '\x10C', '\x10E', '\x5', 
		'\x44', '#', '\x2', '\x10D', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\x39', '\x2', '\x2', '\x110', 
		'\x111', '\a', 'L', '\x2', '\x2', '\x111', '\x112', '\a', '-', '\x2', 
		'\x2', '\x112', '\x113', '\x5', '\x4', '\x3', '\x2', '\x113', '\x114', 
		'\t', '\t', '\x2', '\x2', '\x114', '\x115', '\x5', '\x4', '\x3', '\x2', 
		'\x115', '\x116', '\a', ':', '\x2', '\x2', '\x116', '\x117', '\x5', ' ', 
		'\x11', '\x2', '\x117', '?', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\a', '\x39', '\x2', '\x2', '\x119', '\x11A', '\a', 'L', '\x2', '\x2', 
		'\x11A', '\x11B', '\a', '\x32', '\x2', '\x2', '\x11B', '\x11C', '\x5', 
		'\x4', '\x3', '\x2', '\x11C', '\x11D', '\a', ':', '\x2', '\x2', '\x11D', 
		'\x11E', '\x5', ' ', '\x11', '\x2', '\x11E', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x120', '\a', '\x43', '\x2', '\x2', '\x120', '\x125', 
		'\x5', ' ', '\x11', '\x2', '\x121', '\x122', '\a', '\x17', '\x2', '\x2', 
		'\x122', '\x124', '\x5', ' ', '\x11', '\x2', '\x123', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x127', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x129', '\x3', '\x2', '\x2', '\x2', '\x127', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', '\a', '\x17', '\x2', '\x2', 
		'\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '\x44', '\x2', '\x2', '\x12C', '\x12D', '\x5', '\x4', '\x3', 
		'\x2', '\x12D', '\x43', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', 
		'\a', '\x45', '\x2', '\x2', '\x12F', '\x130', '\x5', '\x4', '\x3', '\x2', 
		'\x130', '\x131', '\a', ':', '\x2', '\x2', '\x131', '\x132', '\x5', ' ', 
		'\x11', '\x2', '\x132', '\x45', '\x3', '\x2', '\x2', '\x2', '\x133', '\x138', 
		'\a', 'L', '\x2', '\x2', '\x134', '\x135', '\a', '\x15', '\x2', '\x2', 
		'\x135', '\x137', '\a', 'L', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', 
		'\x2', '\x2', '\x137', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x13C', '\a', ':', '\x2', '\x2', '\x13C', 
		'\x13D', '\x5', ' ', '\x11', '\x2', '\x13D', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'O', 'W', '`', 'q', '|', '\x7F', '\x8B', '\x8E', '\x95', 
		'\xA7', '\xAB', '\xB0', '\xC2', '\xCA', '\xCE', '\xD4', '\xDE', '\xE2', 
		'\xE5', '\xEC', '\xF2', '\xF6', '\x107', '\x10D', '\x125', '\x129', '\x138',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JetBrains.ReSharper.Plugins.Spring.Generated
